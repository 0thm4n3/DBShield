{
  "name": "DBShield",
  "tagline": "Database firewall",
  "body": "[![Linux & OS X](https://travis-ci.org/nim4/DBShield.svg?branch=master \"Linux & OS X\")](https://travis-ci.org/nim4/DBShield)\r\n[![Windows](https://ci.appveyor.com/api/projects/status/github/nim4/DBShield?branch=master&svg=true \"Windows\")](https://ci.appveyor.com/project/nim4/DBShield/branch/master)\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/nim4/DBShield)](https://goreportcard.com/report/github.com/nim4/DBShield)\r\n[![codecov](https://codecov.io/gh/nim4/DBShield/branch/master/graph/badge.svg)](https://codecov.io/gh/nim4/DBShield)\r\n[![Dev chat](https://img.shields.io/badge/gitter-chat-20cc20.svg \"Dev chat\")](https://gitter.im/DBShield/Lobby)\r\n[![GoDoc](https://godoc.org/github.com/nim4/DBShield?status.svg)](https://godoc.org/github.com/nim4/DBShield)\r\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/nim4/DBShield/master/LICENSE)\r\n# DBShield\r\n\r\nProtects your data by inspecting incoming queries from your application server and rejecting abnormal ones.\r\n\r\n\r\n---\r\n## How it works?\r\n\r\nFor example, this is how web server normally interacts with database server:\r\n\r\n![Sample Web Server and DB](https://raw.githubusercontent.com/nim4/DBShield/master/misc/how_01.png)\r\n\r\nBy adding DBShield in front of database server we can protect it against abnormal queries. To detect abnormal queries we first run DBShield in learning mode. Learning mode lets any query pass but it records information about it (pattern, username, time and source) into internal database.\r\n\r\n![Learning mode](https://raw.githubusercontent.com/nim4/DBShield/master/misc/how_02.png)\r\n\r\n\r\nAfter collecting enough patterns we can run DBShield in protect mode. Protect mode can distinguish abnormal query pattern, user and source and take action based on configurations.\r\n\r\n![Protect mode](https://raw.githubusercontent.com/nim4/DBShield/master/misc/how_03.png)\r\n\r\n---\r\n\r\n## Sample Outputs\r\n\r\n**CLI**\r\n\r\n```\r\n$ go run main.go\r\n2016/10/15 16:25:31 [INFO]  Config file: /etc/dbshield.yml\r\n2016/10/15 16:25:31 [INFO]  Internal DB: /tmp/model/10.0.0.21_postgres.db\r\n2016/10/15 16:25:31 [INFO]  Listening: 0.0.0.0:5000\r\n2016/10/15 16:25:31 [INFO]  Backend: postgres (10.0.0.21:5432)\r\n2016/10/15 16:25:31 [INFO]  Protect: true\r\n2016/10/15 16:25:31 [INFO]  Web interface on https://127.0.0.1:8070/\r\n2016/10/15 16:25:33 [INFO]  Connected from: 10.0.0.20:35910\r\n2016/10/15 16:25:33 [INFO]  Connected to: 10.0.0.21:5432\r\n2016/10/15 16:25:33 [INFO]  SSL connection\r\n2016/10/15 16:25:34 [DEBUG] Client handshake done\r\n2016/10/15 16:25:34 [DEBUG] Server handshake done\r\n2016/10/15 16:25:34 [INFO]  User: postgres\r\n2016/10/15 16:25:34 [INFO]  Database: test\r\n2016/10/15 16:25:34 [INFO]  Query: SELECT * FROM stocks where id=-1 or 1=1\r\n2016/10/15 16:25:34 [WARN]  Pattern not found: [53 55 51 52 55 52 50 53 55 51 53 49 115 116 111 99 107 115 53 55 51 53 50 105 100 54 49 52 53 53 55 51 55 57 53 55 52 48 52 53 55 51 55 57 54 49 53 55 51 55 57] (SELECT * FROM stocks where id=-1 or 1=1)\r\n2016/10/15 16:25:34 [WARN]  Dropping connection\r\n```\r\n\r\n\r\n**Web Interface**\r\n\r\n![Web UI](https://raw.githubusercontent.com/nim4/DBShield/master/misc/graph.png)\r\n\r\n---\r\n## Demo\r\n\r\nFor testing we have a vulnerable page at `http://192.168.22.1/user.php`\r\n\r\n`user.php` contents:\r\n```php\r\n<?php\r\ninclude('config.php');\r\n// Create connection\r\n$conn = new mysqli($servername, $username, $password, \"test\");\r\n\r\n// Check connection\r\nif ($conn->connect_error) {\r\n    die(\"Connection failed: \" . $conn->connect_error);\r\n}\r\n\r\nif (!empty($_GET['id'])){\r\n  if ($result = $conn->query(\"SELECT * FROM Persons WHERE id=\".$_GET['id'])) {\r\n    foreach($result as $k => $v){\r\n      echo \"Name: <b>{$v['Name']}</b><br />City: <b>{$v['City']}</b>\" ;\r\n    }\r\n    mysqli_free_result($result);\r\n  }\r\n }\r\n$conn->close();\r\n```\r\n\r\nWe are using [sqlmap](https://github.com/sqlmapproject/sqlmap) for exploiting the vulnerability, result are as below:\r\n\r\n```\r\n$ sqlmap -u http://192.168.22.1/user.php?id=1\r\n```\r\n```\r\n[12:14:31] [INFO] GET parameter 'id' is 'Generic UNION query (NULL) - 1 to 20 columns' injectable\r\nGET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N]\r\nsqlmap identified the following injection point(s) with a total of 53 HTTP(s) requests:\r\n---\r\nParameter: id (GET)\r\n    Type: boolean-based blind\r\n    Title: AND boolean-based blind - WHERE or HAVING clause\r\n    Payload: id=1 AND 8909=8909\r\n\r\n    Type: AND/OR time-based blind\r\n    Title: MySQL >= 5.0.12 AND time-based blind (SELECT)\r\n    Payload: id=1 AND (SELECT * FROM (SELECT(SLEEP(5)))eIyW)\r\n\r\n    Type: UNION query\r\n    Title: Generic UNION query (NULL) - 3 columns\r\n    Payload: id=1 UNION ALL SELECT NULL,NULL,CONCAT(0x71786b7071,0x64666b56715965797a6e654141634c765a6575674b79686461476c5556766671584f74486c5a5a58,0x717a717a71)-- -\r\n---\r\n[12:14:33] [INFO] the back-end DBMS is MySQL\r\nweb server operating system: Linux Ubuntu\r\nweb application technology: PHP 7.0.8\r\nback-end DBMS: MySQL 5.0.12\r\n```\r\n\r\nThen we try to exploiting it again using the same tool, this time DBShield is protecting the database:\r\n\r\n```\r\n$ sqlmap -u http://192.168.22.1/user.php?id=1\r\n```\r\n\r\n```\r\n[12:20:36] [INFO] testing 'Oracle AND time-based blind'\r\n[12:20:37] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'\r\n[12:20:37] [WARNING] using unescaped version of the test because of zero knowledge of the back-end DBMS. You can try to explicitly set it using option '--dbms'\r\n[12:20:43] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'\r\n[12:20:47] [WARNING] GET parameter 'id' is not injectable\r\n```\r\n---\r\n## Installation\r\n\r\nGet it\r\n```\r\n$ go get -u github.com/nim4/DBShield\r\n```\r\n\r\nThen you can get help using \"-h\" argument:\r\n```\r\n$ $GOPATH/bin/DBShield -h\r\nDBShield 1.0.0-beta2\r\nUsage of DBShield:\r\n  -c string\r\n    \tConfig file (default \"/etc/dbshield.yml\")\r\n  -d\tGet list of captured patterns\r\n  -h\tShow help\r\n  -k\tShow parsed config and exit\r\n  -version\r\n    \tShow version\r\n\r\n```\r\n\r\nand run it with your configuration like:\r\n```\r\n$ $GOPATH/bin/DBShield -c config.yml\r\n```\r\nsee [sample configuration  file](https://github.com/nim4/DBShield/blob/master/conf/dbshield.yml)\r\n\r\n---\r\n## Supports:\r\n\r\n| Database     | Protect | SSL |\r\n|:------------:|:-------:|:---:|\r\n| **DB2**   | ![Yes][YesImg] | ![No][NoImg]  |\r\n| **MariaDB**  | ![Yes][YesImg] | ![Yes][YesImg] |\r\n| **MySQL**    | ![Yes][YesImg] | ![Yes][YesImg] |\r\n| **Oracle**   | ![Yes][YesImg] | ![No][NoImg]  |\r\n| **Postgres** | ![Yes][YesImg] | ![Yes][YesImg] |\r\n\r\n---\r\n## To Do\r\n\r\n(Sorted by priority)\r\n\r\n - Improve documentation\r\n - Add Microsoft SQL Server\r\n - Add more command-line arguments\r\n - Get 90% test coverage\r\n - Support Oracle SSL\r\n\r\n [YesImg]: https://raw.githubusercontent.com/nim4/DBShield/master/misc/yes.png\r\n [NoImg]: https://raw.githubusercontent.com/nim4/DBShield/master/misc/no.png\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}